SHELL := /bin/bash
.PHONY: clean all excerpts
.SECONDARY:
.DEFAULT_GOAL := all

clean:
	find . \( \( -type f -not \( \
		-name '*.dtx' -or -name 'ins.*' -or -name .gitignore -or               \
		-name Makefile -or -name memoize.cfg -or -name extract-excerpts.pl -or \
		-name get-filename-from-mmz.tex                                        \
	\) \) -or \( -type d -name '*.memo.dir' \) \) -print -delete

N = 0

%.pdf: %.tex
	touch $*.mmz ; memoize-clean.py --all --yes $*.mmz
	rm -f $*.mmz
	latexmk -C $*
	if [[ $(N) > 0 ]] ; then                                               \
		for ((n=1;$$n<=$(N);n++)) ; do                                 \
			cp $*.tex.c$$n $*.tex ; $(BEFORE_EACH_COMPILATION)     \
			pdflatex -interaction batchmode $* ;                   \
			cp $*.pdf $*.c$$n.pdf ;                                \
			if [[ -a $*.mmz ]] ; then cp $*.mmz $*.mmz.c$$n ; fi ; \
		done ;                                                         \
	else                                                                   \
		pdflatex -interaction batchmode $* ;                           \
	fi

%:: %.dtx
	sed 's|example|$*|g;' ins.begin > $*.ins
	for ((n=1;$$n<=$(N);n++)) ;                                       \
		do sed "s|example|$*|g; s/c1/c$$n/g;" ins.mid >> $*.ins ; \
	done
	cat ins.end >> $*.ins
	tex -interaction batchmode $*.ins
	shopt -s nullglob ; sed -i 's/~//g;' $* $*.attachment $*.c? $*.c?.attachment

%.listing.attachment: %.listing
	sed 's/~//g;' $< > $@

EMPTY :::=
SPACE :::= $(EMPTY) $(EMPTY)
COMMA = ,
COLON_SPACE = :$(SPACE)
TAB = $(EMPTY)	$(EMPTY)
define NEWLINE


endef

SED_CMD :::= \\\\\([a-zA-Z]\\+\)
SED_CMD_ :::= \\\\[a-zA-Z]\\+
SED_MARG :::= {\([^}]*\)}
SED_MARG_ :::= {[^}]*}

GET_FILENAME_FROM_MMZ = etex \
'\input{get-filename-from-mmz}\get{$(1)}{$(2)}{$(3)}{$(4)}{$(5)}'

excerpts: memoize.excerpts advice.excerpts collargs.excerpts

%.excerpts: ../../%.edtx
	perl extract-excerpts.pl $< && touch $@

TARGETS :=

define ATTACHMENT
ATTACHMENTS += attachments/$(1)
ifeq ($$(findstring $$(suffix $(1)),.c1.c2.c3.c4.c5.c6.c7.c8.c9),)
attachments/$$(or $(2),$(1)): $(1).attachment
	cp $$< $$@
else
attachments/$$(or $(2),$$(basename $(1))): $(1).attachment
	cp $$< $$@
endif
endef


# We don't declare any prerequisites for specific attachments, because some of
# these (like .c1 files) are not declared as targets, even if they are
# generated by making a .tex or a .pdf.  Instead, we have all attachments
# require all targets at the end of this file.
define ATTACHMENT
ATTACHMENTS += attachments/$(1)
ifeq ($$(findstring $$(suffix $(1)),.c1.c2.c3.c4.c5.c6.c7.c8.c9),)
attachments/$$(or $(2),$(1)):
	cp $(1).attachment $$@
else
attachments/$$(or $(2),$$(basename $(1))): $(1).attachment
	cp $(1).attachment $$@
endif
endef


################################################################################

TARGETS += ConTeXt.tex

TARGETS += _auto-ref.tex

TARGETS += _collargs-ignore-other-tags.tex
_collargs-ignore-other-tags.tex: N = 2

TARGETS += _collargs-verbatim.tex

TARGETS += automemoize-command.pdf
$(eval $(call ATTACHMENT,automemoize-command.tex))

TARGETS += automemoize-environment.pdf
$(eval $(call ATTACHMENT,automemoize-environment.tex))

TARGETS += beamer.pdf beamer.cmemo beamer.ccmemo
$(eval $(call ATTACHMENT,beamer.tex))
beamer.cmemo: beamer.pdf
	$(call GET_FILENAME_FROM_MMZ,GetFirst,mmzNewCMemo,$(basename $<).mmz,mymemo,$@)
	sed 's/\\mmzSetBeamerOverlays $(SED_MARG)$(SED_MARG)/~\0~/'  `tail -1 $@` > $@.listing
beamer.ccmemo: beamer.pdf
	$(call GET_FILENAME_FROM_MMZ,GetFirst,mmzNewCCMemo,$(basename $<).mmz,mymemo,$@)
	sed 's/overlay=[0-9]*/~\0~/;   s/pauses=[0-9]*/~\0~/;   s/}\\mmzIncludeExtern/}\n\\mmzIncludeExtern/;   s/\\\mmzStepPgfPictureId/\n\0/;   '  `tail -1 $@` > $@.listing

TARGETS += book.tex chapters/chapter1.tex
ATTACHMENTS += attachments/chapters/chapter1.tex
attachments/chapters/chapter1.tex: chapters/chapter1.tex
	mkdir -p attachments/chapters
	cp $< $@

TARGETS += capture.pdf
$(eval $(call ATTACHMENT,capture.tex))

TARGETS += chained-advice.tex
$(eval $(call ATTACHMENT,chained-advice.tex))
chained-advice.tex: N = 3

TARGETS += clean-house.pdf
$(eval $(call ATTACHMENT,clean-house.tex))

TARGETS += collargs-expandable-processor.tex

TARGETS += collargs-makebox.tex

TARGETS += collargs-minipage.tex

TARGETS += collargs-nodelimiters.tex

TARGETS += collargs-processor.tex

TARGETS += collargs-return-no.tex

TARGETS += collargs-return-plain.tex

TARGETS += collargs-transition-comment.tex

TARGETS += collargs-transition-cs.tex

TARGETS += collargs-transition-ok.tex

TARGETS += collargs-verbatim.tex

TARGETS += countdown.pdf countdown.sty
countdown.sty: N = 2
countdown.pdf: countdown.sty
countdown.pdf: N = 2 
countdown.pdf: BEFORE_EACH_COMPILATION = cp $*.sty.c1 $*.sty ;
$(eval $(call ATTACHMENT,countdown.tex.c1))
$(eval $(call ATTACHMENT,countdown.sty.c1))
$(eval $(call ATTACHMENT,countdown.sty.c2,countdown-integrated-driver.sty))

TARGETS += dirty-house.pdf
$(eval $(call ATTACHMENT,dirty-house.tex))

TARGETS += disable-auto-cmd.tex
$(eval $(call ATTACHMENT,disable-auto-cmd.tex))

TARGETS += disable-auto-env.tex
$(eval $(call ATTACHMENT,disable-auto-env.tex))

TARGETS += disable-bad.tex
$(eval $(call ATTACHMENT,disable-bad.tex))

TARGETS += disable-good.tex
$(eval $(call ATTACHMENT,disable-good.tex))

TARGETS += disable-nomemoize.tex
$(eval $(call ATTACHMENT,disable-nomemoize.tex))

TARGETS += disable-nommz.tex
$(eval $(call ATTACHMENT,disable-nommz.tex))

TARGETS += disable.pdf
$(eval $(call ATTACHMENT,disable.tex))

TARGETS += fontsize.pdf
fontsize.pdf: N = 2
$(eval $(call ATTACHMENT,fontsize.tex))

TARGETS += label.pdf label.ccmemo
label.pdf: N = 3
label.ccmemo: label.pdf
	$(call GET_FILENAME_FROM_MMZ,GetFirst,mmzNewCCMemo,$(basename $<).mmz.c1,mymemo,$@)
	sed 's/\\quitvmode \\mmzIncludeExtern/\\quitvmode\n\\mmzIncludeExtern/;   s/$(SED_MARG)\\mmzIncludeExtern/{\1}\n\\mmzIncludeExtern/;   s/\\mmzLabel *$(SED_MARG)$(SED_MARG)/~\\mmzLabel{\1}{\2}~ /g;   s/\\\mmzStepPgfPictureId/\n\0/;   ' `tail -1 $@` > $@.listing
C1_ATTACHMENTS += label.tex

TARGETS += label+.pdf label+.ccmemo
label+.pdf: N = 2
label+.tex: N = 6
label+.ccmemo: label+.pdf
	$(call GET_FILENAME_FROM_MMZ,GetFirst,mmzNewCCMemo,$(basename $<).mmz.c1,mymemo,$@)
	sed 's/\\mmzLabel *$(SED_MARG)$(SED_MARG)/~\0~/;   s/$(SED_MARG)\\mmzIncludeExtern/\1 \\mmzIncludeExtern/;   s/\($(SED_MARG_)$(SED_MARG_)$(SED_MARG_)\)\($(SED_MARG_)$(SED_MARG_)$(SED_MARG_)$(SED_MARG_)\)/\1 \2/;'  `tail -1 $@` > $@.listing

$(eval $(call ATTACHMENT,))

$(eval $(call ATTACHMENT,label+.tex))
$(eval $(call ATTACHMENT,label+.tex.c3,label+mmzNoRef.tex))
$(eval $(call ATTACHMENT,label+.tex.c4,label+context.tex))
$(eval $(call ATTACHMENT,label+.tex.c5,label+listii.tex))
$(eval $(call ATTACHMENT,label+.tex.c6,label+auto.tex))

TARGETS += manual.pdf
$(eval $(call ATTACHMENT,manual.tex))

TARGETS += meaning-to-context.pdf
meaning-to-context.pdf: N = 2
C1_ATTACHMENTS += meaning-to-context.tex

TARGETS += memoize-example.cfg
$(eval $(call ATTACHMENT,memoize-example.cfg))

TARGETS += memoize-internal.pdf
memoize-internal.pdf: N = 2
C1_ATTACHMENTS += memoize-internal.tex

TARGETS += memoize-region.cfg
$(eval $(call ATTACHMENT,memoize-region.cfg))

TARGETS += mmztikz.pdf
$(eval $(call ATTACHMENT,mmztikz.tex))

TARGETS += no-linebreaking.pdf
no-linebreaking.pdf: N = 2
C1_ATTACHMENTS += no-linebreaking.tex

TARGETS += om-collector-NewDocumentCommand.tex
$(eval $(call ATTACHMENT,om-collector-NewDocumentCommand.tex))

TARGETS += om-collector-newcommand.tex
$(eval $(call ATTACHMENT,om-collector-newcommand.tex))

TARGETS += overlay.pdf
overlay.pdf: N = 4

$(eval $(call ATTACHMENT,overlay.tex.c1))
$(eval $(call ATTACHMENT,overlay.tex.c2,overlay-no-padding.tex))
$(eval $(call ATTACHMENT,overlay.tex.c3,overlay-default-padding.tex))
$(eval $(call ATTACHMENT,overlay.tex.c4,overlay-extra-padding.tex))

TARGETS += per-overlay-v1.sty
$(eval $(call ATTACHMENT,per-overlay-v1.sty))

TARGETS += pgfmathparse-embellished.pdf
$(eval $(call ATTACHMENT,pgfmathparse-embellished.tex))

TARGETS += pgfmathparse.pdf pgfmathparse.ccmemo
pgfmathparse.ccmemo: pgfmathparse.pdf
	$(call GET_FILENAME_FROM_MMZ,GetFirst,mmzNewCCMemo,$(basename $<).mmz,mymemo,$@)
$(eval $(call ATTACHMENT,pgfmathparse.tex))

TARGETS += plainTeX.tex

TARGETS += poormansbox.pdf poormansbox.sty
poormansbox.pdf: poormansbox.sty
$(eval $(call ATTACHMENT,poormansbox.tex))
$(eval $(call ATTACHMENT,poormansbox.sty))

TARGETS += poormansbox-memoizable.pdf poormansbox-memoizable.sty poormansbox-memoizable.cmemo
poormansbox-memoizable.pdf: poormansbox-memoizable.sty
poormansbox-memoizable.cmemo: poormansbox-memoizable.pdf
	$(call GET_FILENAME_FROM_MMZ,GetLast,mmzNewCMemo,$(basename $<).mmz,mymemo,$@)
	sed 's/]{/]\n              {/;' `tail -1 $@` > $@.listing
$(eval $(call ATTACHMENT,poormansbox-memoizable.sty))

TARGETS += poormansbox-driver.pdf poormansbox-driver.sty poormansbox-driver.ccmemo
poormansbox-driver.pdf: N = 2
poormansbox-driver.pdf: poormansbox-driver.sty
poormansbox-driver.ccmemo: poormansbox-driver.pdf
	$(call GET_FILENAME_FROM_MMZ,GetSecond,mmzNewCCMemo,$(basename $<).mmz.c1,mymemo,$@)
	sed 's/\\csuse *{poormansbox@outer}/~\0~/;   s/{\\mmzIncludeExtern.*}}/~\0~/'  `tail -1 $@` > $@.listing
C1_ATTACHMENTS += poormansbox-driver.tex
$(eval $(call ATTACHMENT,poormansbox-driver.sty))

TARGETS += progressbar.pdf
progressbar.pdf: N = 2
C1_ATTACHMENTS += progressbar.tex

TARGETS += readonly.pdf
readonly.pdf: N = 2
C1_ATTACHMENTS += readonly.tex

TARGETS += recompile.pdf
recompile.pdf: N = 3
C1_ATTACHMENTS += recompile.tex

TARGETS += record-extern-pages.tex
$(eval $(call ATTACHMENT,record-extern-pages.tex))

TARGETS += record-files.tex
$(eval $(call ATTACHMENT,record-files.tex))

TARGETS += redefinitions.pdf
redefinitions.pdf: N = 7
C1_ATTACHMENTS += redefinitions.tex

TARGETS += ref.pdf ref.cmemo
ref.pdf: N = 7
ref.cmemo: ref.pdf
	$(call GET_FILENAME_FROM_MMZ,GetFirst,mmzNewCMemo,$(basename $<).mmz.c1,mymemo,$@)
	sed 's/\\global.*/~\0~/'  `tail -1 $@` > $@.listing
C3_ATTACHMENTS += ref.tex
C7_ATTACHMENTS += ref-force.tex

TARGETS += salt.pdf
$(eval $(call ATTACHMENT,salt.tex))

TARGETS += sectionbox.tex
$(eval $(call ATTACHMENT,sectionbox.tex))

TARGETS += skak.pdf
$(eval $(call ATTACHMENT,skak.tex))

TARGETS += test.pdf
$(eval $(call ATTACHMENT,test.tex))

TARGETS += titlepage.pdf titlepage.mmz.c1 titlepage.mmz.c2 titlepage.ccmemo titlepage.cmemo
titlepage.pdf: N = 2
titlepage.mmz.c1: titlepage.pdf
	sed -i 's/\\mmzNewExtern/~\0~/' $@
titlepage.mmz.c2: titlepage.pdf
	sed -i 's/\\mmzUsedExtern/~\0~/' $@
titlepage.cmemo: titlepage.pdf
	$(call GET_FILENAME_FROM_MMZ,GetFirst,mmzNewCMemo,$(basename $<).mmz.c1,mymemo,$@)
titlepage.ccmemo: titlepage.pdf
	$(call GET_FILENAME_FROM_MMZ,GetFirst,mmzNewCCMemo,$(basename $<).mmz.c1,mymemo,$@)
	sed 's/\\quitvmode \\mmzIncludeExtern/\\quitvmode\n\\mmzIncludeExtern/; s/\\\mmzStepPgfPictureId/\n\0/' `tail -1 titlepage.ccmemo` > $@.listing
$(eval $(call ATTACHMENT,titlepage.tex))

TARGETS += verbatim-auto.pdf
$(eval $(call ATTACHMENT,verbatim-auto.tex))

TARGETS += verbatim-manual.pdf
$(eval $(call ATTACHMENT,verbatim-manual.tex))

TARGETS += vref.tex
$(eval $(call ATTACHMENT,vref.tex))

################################################################################

$(ATTACHMENTS): $(TARGETS)
all: excerpts $(TARGETS) $(ATTACHMENTS)
